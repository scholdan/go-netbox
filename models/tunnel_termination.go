// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TunnelTermination tunnel termination
//
// swagger:model TunnelTermination
type TunnelTermination struct {

	// Created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// Custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// outside ip
	OutsideIP *NestedIPAddress `json:"outside_ip,omitempty"`

	// role
	// Required: true
	Role *TunnelTerminationRole `json:"role"`

	// tags
	Tags []*NestedTag `json:"tags"`

	// termination
	// Read Only: true
	Termination interface{} `json:"termination,omitempty"`

	// termination id
	// Maximum: 9.223372036854776e+18
	// Minimum: 0
	TerminationID *int64 `json:"termination_id,omitempty"`

	// termination type
	// Required: true
	TerminationType *string `json:"termination_type"`

	// tunnel
	// Required: true
	Tunnel *Tunnel `json:"tunnel"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this tunnel termination
func (m *TunnelTermination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutsideIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelTermination) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) validateOutsideIP(formats strfmt.Registry) error {
	if swag.IsZero(m.OutsideIP) { // not required
		return nil
	}

	if m.OutsideIP != nil {
		if err := m.OutsideIP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outside_ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outside_ip")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelTermination) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelTermination) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TunnelTermination) validateTerminationID(formats strfmt.Registry) error {
	if swag.IsZero(m.TerminationID) { // not required
		return nil
	}

	if err := validate.MinimumInt("termination_id", "body", *m.TerminationID, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("termination_id", "body", *m.TerminationID, 9.223372036854776e+18, false); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) validateTerminationType(formats strfmt.Registry) error {

	if err := validate.Required("termination_type", "body", m.TerminationType); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) validateTunnel(formats strfmt.Registry) error {

	if err := validate.Required("tunnel", "body", m.Tunnel); err != nil {
		return err
	}

	if m.Tunnel != nil {
		if err := m.Tunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelTermination) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tunnel termination based on the context it is used
func (m *TunnelTermination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutsideIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelTermination) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *TunnelTermination) contextValidateOutsideIP(ctx context.Context, formats strfmt.Registry) error {

	if m.OutsideIP != nil {

		if swag.IsZero(m.OutsideIP) { // not required
			return nil
		}

		if err := m.OutsideIP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outside_ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outside_ip")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelTermination) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {

		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelTermination) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TunnelTermination) contextValidateTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.Tunnel != nil {

		if err := m.Tunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tunnel")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelTermination) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TunnelTermination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelTermination) UnmarshalBinary(b []byte) error {
	var res TunnelTermination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TunnelTerminationRole tunnel termination role
//
// swagger:model TunnelTerminationRole
type TunnelTerminationRole struct {

	// label
	// Enum: ["Peer","Hub","Spoke"]
	Label string `json:"label,omitempty"`

	// * `peer` - Peer
	// * `hub` - Hub
	// * `spoke` - Spoke
	// Enum: ["peer","hub","spoke"]
	Value string `json:"value,omitempty"`
}

// Validate validates this tunnel termination role
func (m *TunnelTerminationRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tunnelTerminationRoleTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Peer","Hub","Spoke"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelTerminationRoleTypeLabelPropEnum = append(tunnelTerminationRoleTypeLabelPropEnum, v)
	}
}

const (

	// TunnelTerminationRoleLabelPeer captures enum value "Peer"
	TunnelTerminationRoleLabelPeer string = "Peer"

	// TunnelTerminationRoleLabelHub captures enum value "Hub"
	TunnelTerminationRoleLabelHub string = "Hub"

	// TunnelTerminationRoleLabelSpoke captures enum value "Spoke"
	TunnelTerminationRoleLabelSpoke string = "Spoke"
)

// prop value enum
func (m *TunnelTerminationRole) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tunnelTerminationRoleTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TunnelTerminationRole) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelEnum("role"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var tunnelTerminationRoleTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["peer","hub","spoke"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelTerminationRoleTypeValuePropEnum = append(tunnelTerminationRoleTypeValuePropEnum, v)
	}
}

const (

	// TunnelTerminationRoleValuePeer captures enum value "peer"
	TunnelTerminationRoleValuePeer string = "peer"

	// TunnelTerminationRoleValueHub captures enum value "hub"
	TunnelTerminationRoleValueHub string = "hub"

	// TunnelTerminationRoleValueSpoke captures enum value "spoke"
	TunnelTerminationRoleValueSpoke string = "spoke"
)

// prop value enum
func (m *TunnelTerminationRole) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tunnelTerminationRoleTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TunnelTerminationRole) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("role"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tunnel termination role based on context it is used
func (m *TunnelTerminationRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TunnelTerminationRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelTerminationRole) UnmarshalBinary(b []byte) error {
	var res TunnelTerminationRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
