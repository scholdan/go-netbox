// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tunnel Adds support for custom fields and tags.
//
// swagger:model Tunnel
type Tunnel struct {

	// comments
	Comments string `json:"comments,omitempty"`

	// created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// custom fields
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`

	// description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// encapsulation
	// Required: true
	Encapsulation *TunnelEncapsulation `json:"encapsulation"`

	// group
	Group *NestedTunnelGroup `json:"group,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// name
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// status
	// Required: true
	Status *TunnelStatus `json:"status"`

	// tags
	Tags []*NestedTag `json:"tags"`

	// tenant
	Tenant *NestedTenant `json:"tenant,omitempty"`

	// tunnel id
	// Maximum: 9.223372036854776e+18
	// Minimum: 0
	TunnelID *int64 `json:"tunnel_id,omitempty"`

	// url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this tunnel
func (m *Tunnel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncapsulation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tunnel) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) validateEncapsulation(formats strfmt.Registry) error {

	if err := validate.Required("encapsulation", "body", m.Encapsulation); err != nil {
		return err
	}

	if m.Encapsulation != nil {
		if err := m.Encapsulation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encapsulation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encapsulation")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tunnel) validateTenant(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenant) { // not required
		return nil
	}

	if m.Tenant != nil {
		if err := m.Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) validateTunnelID(formats strfmt.Registry) error {
	if swag.IsZero(m.TunnelID) { // not required
		return nil
	}

	if err := validate.MinimumInt("tunnel_id", "body", *m.TunnelID, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("tunnel_id", "body", *m.TunnelID, 9.223372036854776e+18, false); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tunnel based on the context it is used
func (m *Tunnel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncapsulation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tunnel) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) contextValidateEncapsulation(ctx context.Context, formats strfmt.Registry) error {

	if m.Encapsulation != nil {

		if err := m.Encapsulation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encapsulation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encapsulation")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.Group != nil {

		if swag.IsZero(m.Group) { // not required
			return nil
		}

		if err := m.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *Tunnel) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Tunnel) contextValidateTenant(ctx context.Context, formats strfmt.Registry) error {

	if m.Tenant != nil {

		if swag.IsZero(m.Tenant) { // not required
			return nil
		}

		if err := m.Tenant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

func (m *Tunnel) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tunnel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tunnel) UnmarshalBinary(b []byte) error {
	var res Tunnel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TunnelEncapsulation tunnel encapsulation
//
// swagger:model TunnelEncapsulation
type TunnelEncapsulation struct {

	// label
	// Enum: ["IPsec - Transport","IPsec - Tunnel","IP-in-IP","GRE"]
	Label string `json:"label,omitempty"`

	// * `ipsec-transport` - IPsec - Transport
	// * `ipsec-tunnel` - IPsec - Tunnel
	// * `ip-ip` - IP-in-IP
	// * `gre` - GRE
	// Enum: ["ipsec-transport","ipsec-tunnel","ip-ip","gre"]
	Value string `json:"value,omitempty"`
}

// Validate validates this tunnel encapsulation
func (m *TunnelEncapsulation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tunnelEncapsulationTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IPsec - Transport","IPsec - Tunnel","IP-in-IP","GRE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelEncapsulationTypeLabelPropEnum = append(tunnelEncapsulationTypeLabelPropEnum, v)
	}
}

const (

	// TunnelEncapsulationLabelIPsecDashTransport captures enum value "IPsec - Transport"
	TunnelEncapsulationLabelIPsecDashTransport string = "IPsec - Transport"

	// TunnelEncapsulationLabelIPsecDashTunnel captures enum value "IPsec - Tunnel"
	TunnelEncapsulationLabelIPsecDashTunnel string = "IPsec - Tunnel"

	// TunnelEncapsulationLabelIPDashInDashIP captures enum value "IP-in-IP"
	TunnelEncapsulationLabelIPDashInDashIP string = "IP-in-IP"

	// TunnelEncapsulationLabelGRE captures enum value "GRE"
	TunnelEncapsulationLabelGRE string = "GRE"
)

// prop value enum
func (m *TunnelEncapsulation) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tunnelEncapsulationTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TunnelEncapsulation) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelEnum("encapsulation"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var tunnelEncapsulationTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipsec-transport","ipsec-tunnel","ip-ip","gre"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelEncapsulationTypeValuePropEnum = append(tunnelEncapsulationTypeValuePropEnum, v)
	}
}

const (

	// TunnelEncapsulationValueIpsecDashTransport captures enum value "ipsec-transport"
	TunnelEncapsulationValueIpsecDashTransport string = "ipsec-transport"

	// TunnelEncapsulationValueIpsecDashTunnel captures enum value "ipsec-tunnel"
	TunnelEncapsulationValueIpsecDashTunnel string = "ipsec-tunnel"

	// TunnelEncapsulationValueIPDashIP captures enum value "ip-ip"
	TunnelEncapsulationValueIPDashIP string = "ip-ip"

	// TunnelEncapsulationValueGre captures enum value "gre"
	TunnelEncapsulationValueGre string = "gre"
)

// prop value enum
func (m *TunnelEncapsulation) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tunnelEncapsulationTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TunnelEncapsulation) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("encapsulation"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tunnel encapsulation based on context it is used
func (m *TunnelEncapsulation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TunnelEncapsulation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelEncapsulation) UnmarshalBinary(b []byte) error {
	var res TunnelEncapsulation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TunnelStatus tunnel status
//
// swagger:model TunnelStatus
type TunnelStatus struct {

	// label
	// Enum: ["Planned","Active","Disabled"]
	Label string `json:"label,omitempty"`

	// * `planned` - Planned
	// * `active` - Active
	// * `disabled` - Disabled
	// Enum: ["planned","active","disabled"]
	Value string `json:"value,omitempty"`
}

// Validate validates this tunnel status
func (m *TunnelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tunnelStatusTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Planned","Active","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelStatusTypeLabelPropEnum = append(tunnelStatusTypeLabelPropEnum, v)
	}
}

const (

	// TunnelStatusLabelPlanned captures enum value "Planned"
	TunnelStatusLabelPlanned string = "Planned"

	// TunnelStatusLabelActive captures enum value "Active"
	TunnelStatusLabelActive string = "Active"

	// TunnelStatusLabelDisabled captures enum value "Disabled"
	TunnelStatusLabelDisabled string = "Disabled"
)

// prop value enum
func (m *TunnelStatus) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tunnelStatusTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TunnelStatus) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelEnum("status"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var tunnelStatusTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["planned","active","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelStatusTypeValuePropEnum = append(tunnelStatusTypeValuePropEnum, v)
	}
}

const (

	// TunnelStatusValuePlanned captures enum value "planned"
	TunnelStatusValuePlanned string = "planned"

	// TunnelStatusValueActive captures enum value "active"
	TunnelStatusValueActive string = "active"

	// TunnelStatusValueDisabled captures enum value "disabled"
	TunnelStatusValueDisabled string = "disabled"
)

// prop value enum
func (m *TunnelStatus) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tunnelStatusTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TunnelStatus) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("status"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tunnel status based on context it is used
func (m *TunnelStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TunnelStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelStatus) UnmarshalBinary(b []byte) error {
	var res TunnelStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
