// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventRule Adds support for custom fields and tags.
//
// swagger:model EventRule
type EventRule struct {

	// action object
	// Read Only: true
	ActionObject interface{} `json:"action_object,omitempty"`

	// action object id
	ActionObjectID int64 `json:"action_object_id,omitempty"`

	// action object type
	// Required: true
	ActionObjectType *string `json:"action_object_type"`

	// action type
	// Required: true
	ActionType *EventRuleActionType `json:"action_type"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// Conditions
	//
	// A set of conditions which determine whether the webhook will be generated.
	Conditions interface{} `json:"conditions,omitempty"`

	// content types
	// Required: true
	// Unique: true
	ContentTypes []string `json:"content_types"`

	// Created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// Custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// Enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// Name
	// Required: true
	// Max Length: 150
	// Min Length: 1
	Name *string `json:"name"`

	// tags
	Tags []*NestedTag `json:"tags"`

	// Tenant
	Tenant *int64 `json:"tenant,omitempty"`

	// Type create
	//
	// Call this webhook when a matching object is created.
	TypeCreate bool `json:"type_create,omitempty"`

	// Type delete
	//
	// Call this webhook when a matching object is deleted.
	TypeDelete bool `json:"type_delete,omitempty"`

	// Type job_end
	//
	// Call this webhook when a matching job ends.
	TypeJobEnd bool `json:"type_job_end,omitempty"`

	// Type job_start
	//
	// Call this webhook when a matching job is started.
	TypeJobStart bool `json:"type_job_start,omitempty"`

	// Type update
	//
	// Call this webhook when a matching object is updated.
	TypeUpdate bool `json:"type_update,omitempty"`

	// url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this event rule
func (m *EventRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventRule) validateActionObjectType(formats strfmt.Registry) error {

	if err := validate.Required("action_object_type", "body", m.ActionObjectType); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) validateActionType(formats strfmt.Registry) error {

	if err := validate.Required("action_type", "body", m.ActionType); err != nil {
		return err
	}

	if m.ActionType != nil {
		if err := m.ActionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action_type")
			}
			return err
		}
	}

	return nil
}

func (m *EventRule) validateContentTypes(formats strfmt.Registry) error {

	if err := validate.Required("content_types", "body", m.ContentTypes); err != nil {
		return err
	}

	if err := validate.UniqueItems("content_types", "body", m.ContentTypes); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 150); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EventRule) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this event rule based on the context it is used
func (m *EventRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventRule) contextValidateActionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ActionType != nil {

		if err := m.ActionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action_type")
			}
			return err
		}
	}

	return nil
}

func (m *EventRule) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *EventRule) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EventRule) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventRule) UnmarshalBinary(b []byte) error {
	var res EventRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EventRuleActionType event rule action type
//
// swagger:model EventRuleActionType
type EventRuleActionType struct {

	// label
	// Enum: ["Webhook","Script"]
	Label string `json:"label,omitempty"`

	// * `webhook` - Webhook
	// * `script` - Script
	// Enum: ["webhook","script"]
	Value string `json:"value,omitempty"`
}

// Validate validates this event rule action type
func (m *EventRuleActionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventRuleActionTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Webhook","Script"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventRuleActionTypeTypeLabelPropEnum = append(eventRuleActionTypeTypeLabelPropEnum, v)
	}
}

const (

	// EventRuleActionTypeLabelWebhook captures enum value "Webhook"
	EventRuleActionTypeLabelWebhook string = "Webhook"

	// EventRuleActionTypeLabelScript captures enum value "Script"
	EventRuleActionTypeLabelScript string = "Script"
)

// prop value enum
func (m *EventRuleActionType) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventRuleActionTypeTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventRuleActionType) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelEnum("action_type"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var eventRuleActionTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webhook","script"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventRuleActionTypeTypeValuePropEnum = append(eventRuleActionTypeTypeValuePropEnum, v)
	}
}

const (

	// EventRuleActionTypeValueWebhook captures enum value "webhook"
	EventRuleActionTypeValueWebhook string = "webhook"

	// EventRuleActionTypeValueScript captures enum value "script"
	EventRuleActionTypeValueScript string = "script"
)

// prop value enum
func (m *EventRuleActionType) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventRuleActionTypeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventRuleActionType) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("action_type"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event rule action type based on context it is used
func (m *EventRuleActionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventRuleActionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventRuleActionType) UnmarshalBinary(b []byte) error {
	var res EventRuleActionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
