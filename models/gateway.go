// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Gateway gateway
//
// swagger:model Gateway
type Gateway struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// display
	Display string `json:"display,omitempty"`

	// gateway ip
	GatewayIP *GatewayIPAddress `json:"gateway_ip,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// prefix
	Prefix *GatewayPrefix `json:"prefix,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// url
	URL string `json:"url,omitempty"`

	// vrf
	Vrf int64 `json:"vrf,omitempty"`
}

// Validate validates this gateway
func (m *Gateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Gateway) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Gateway) validateGatewayIP(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayIP) { // not required
		return nil
	}

	if m.GatewayIP != nil {
		if err := m.GatewayIP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_ip")
			}
			return err
		}
	}

	return nil
}

func (m *Gateway) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Gateway) validatePrefix(formats strfmt.Registry) error {
	if swag.IsZero(m.Prefix) { // not required
		return nil
	}

	if m.Prefix != nil {
		if err := m.Prefix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prefix")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gateway based on the context it is used
func (m *Gateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGatewayIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Gateway) contextValidateGatewayIP(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayIP != nil {

		if swag.IsZero(m.GatewayIP) { // not required
			return nil
		}

		if err := m.GatewayIP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_ip")
			}
			return err
		}
	}

	return nil
}

func (m *Gateway) contextValidatePrefix(ctx context.Context, formats strfmt.Registry) error {

	if m.Prefix != nil {

		if swag.IsZero(m.Prefix) { // not required
			return nil
		}

		if err := m.Prefix.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prefix")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prefix")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Gateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Gateway) UnmarshalBinary(b []byte) error {
	var res Gateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
