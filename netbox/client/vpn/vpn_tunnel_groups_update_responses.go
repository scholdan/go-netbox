// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package vpn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/scholdan/go-netbox/netbox/models"
)

// VpnTunnelGroupsUpdateReader is a Reader for the VpnTunnelGroupsUpdate structure.
type VpnTunnelGroupsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VpnTunnelGroupsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVpnTunnelGroupsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewVpnTunnelGroupsUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVpnTunnelGroupsUpdateOK creates a VpnTunnelGroupsUpdateOK with default headers values
func NewVpnTunnelGroupsUpdateOK() *VpnTunnelGroupsUpdateOK {
	return &VpnTunnelGroupsUpdateOK{}
}

/*
VpnTunnelGroupsUpdateOK describes a response with status code 200, with default header values.

VpnTunnelGroupsUpdateOK vpn tunnel groups update o k
*/
type VpnTunnelGroupsUpdateOK struct {
	Payload *models.TunnelGroup
}

// IsSuccess returns true when this vpn tunnel groups update o k response has a 2xx status code
func (o *VpnTunnelGroupsUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this vpn tunnel groups update o k response has a 3xx status code
func (o *VpnTunnelGroupsUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vpn tunnel groups update o k response has a 4xx status code
func (o *VpnTunnelGroupsUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this vpn tunnel groups update o k response has a 5xx status code
func (o *VpnTunnelGroupsUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this vpn tunnel groups update o k response a status code equal to that given
func (o *VpnTunnelGroupsUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the vpn tunnel groups update o k response
func (o *VpnTunnelGroupsUpdateOK) Code() int {
	return 200
}

func (o *VpnTunnelGroupsUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vpn/tunnel-groups/{id}/][%d] vpnTunnelGroupsUpdateOK %s", 200, payload)
}

func (o *VpnTunnelGroupsUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vpn/tunnel-groups/{id}/][%d] vpnTunnelGroupsUpdateOK %s", 200, payload)
}

func (o *VpnTunnelGroupsUpdateOK) GetPayload() *models.TunnelGroup {
	return o.Payload
}

func (o *VpnTunnelGroupsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TunnelGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVpnTunnelGroupsUpdateDefault creates a VpnTunnelGroupsUpdateDefault with default headers values
func NewVpnTunnelGroupsUpdateDefault(code int) *VpnTunnelGroupsUpdateDefault {
	return &VpnTunnelGroupsUpdateDefault{
		_statusCode: code,
	}
}

/*
VpnTunnelGroupsUpdateDefault describes a response with status code -1, with default header values.

VpnTunnelGroupsUpdateDefault vpn tunnel groups update default
*/
type VpnTunnelGroupsUpdateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this vpn tunnel groups update default response has a 2xx status code
func (o *VpnTunnelGroupsUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this vpn tunnel groups update default response has a 3xx status code
func (o *VpnTunnelGroupsUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this vpn tunnel groups update default response has a 4xx status code
func (o *VpnTunnelGroupsUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this vpn tunnel groups update default response has a 5xx status code
func (o *VpnTunnelGroupsUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this vpn tunnel groups update default response a status code equal to that given
func (o *VpnTunnelGroupsUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the vpn tunnel groups update default response
func (o *VpnTunnelGroupsUpdateDefault) Code() int {
	return o._statusCode
}

func (o *VpnTunnelGroupsUpdateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vpn/tunnel-groups/{id}/][%d] vpn_tunnel-groups_update default %s", o._statusCode, payload)
}

func (o *VpnTunnelGroupsUpdateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /vpn/tunnel-groups/{id}/][%d] vpn_tunnel-groups_update default %s", o._statusCode, payload)
}

func (o *VpnTunnelGroupsUpdateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *VpnTunnelGroupsUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
